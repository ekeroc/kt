#!/bin/bash
source lib/config.sh
source lib/install.sh
source lib/makefile.sh
source lib/unittest.sh
set -e 
set -o pipefail
#####################################################
#               Ktfff Unittest Tool                 #
#                                                   #
#   install - install ktf framework                 #
#   run - build && run all unittest                 #
#   run <test file> - build && run single unittest  #
#                                                   #
#####################################################

function clean_env()
{
    ktfff_info "KTFFF CLEAN"
    sudo /bin/rm -rf BlockDeviceDaemon
    sudo /bin/rm -rf *.o *.ko *.symvers *.mod.c .*.cmd Module.markers modules.order .tmp_versions version.h
    sudo /bin/rm -rf *.ko
    sudo /bin/rm -rf Makefile
    sudo /bin/rm -rf $unitM_temp_dir
    sudo /bin/rm -rf $unitMK_temp_dir
    sudo /bin/rm -rf $unit_output_dir
}

function ktfff_insmod()
{   
    sudo $BUILD_DIR/ktf/kernel/ktf.ko

}

function ktfff_info()
{
    local info_str=$1
    Col='\e[0m'
    BIBlu='\e[0;96m'
    printf "\n${BIBlu}[INFO] ${Col}$info_str \n"
}

function unittest_main()
{
    local suite_list=$@
    mkdir -p $unitM_temp_dir
    mkdir -p $unitMK_temp_dir
    mkdir -p $unit_output_dir

    # build_user_daemon
    ktfff_info "BUILDING KERNEL MODULE"
    if [ "$suite_list" ]; then
        build_all_kern_module $suite_list
    else
        build_all_kern_module $KTFFF_DIR/unittests/*.c
    fi

    ktfff_info "UNNITEST START"
    unittest_start
    ktfff_info "UNNITEST COMPLETE"
}

export LANG=en_US


# --- Command line help -------------------------------------------
function usage()
{
    echo -e "\nUsage: $0 [argument...]"
    echo
    echo -e "  install                      install ktfff (gtest, ktf)."
    echo -e "  run                          build all kernel module and run all unittest case."
    echo -e "  run <test file>              build specific kernel module and run specific unittest case."
    echo -e "  clean                        remove all file generated by ktfff."
    echo -e "  -h, --help                   display this help text and exit."
    echo
    exit 1
}

# --- Ktfff main --------------------------------------------------
while [ "$#" ]; do
    case $1 in
        install )
            shift
            ktfff_info "KTFFF INSTALL\n"
            ktfff_setup
            exit
            ;;
        run )
            shift
            if [ $# -gt 0 ]; then
                suite_list=$(unittest_check $@)
            fi
            clean_env
            unittest_main $suite_list
            exit
            ;;
        clean )
            shift
            clean_env
            exit
            ;;
        -h | --help )
            usage
            ;;
        * )
            usage
    esac
    shift
done 


# 1. Run All && Collect Result
# 2. Run One && Collect Result
# 3. Build && Run
# 4. Install ktfff


# print:
# 	var=-I$(_DISCO_CN_ROOT)common/
# 	$(info $$var is [${var}])

# find . -type f -name ".*.cmd" -or 
# find . -type f -name "*.o.*" -delete
# find . -type f -name ".*.cmd" -delete
# find . -type f -name "*.o" -delete


# /bin/mv: cannot stat 'test_hello.ko': No such file or directory
