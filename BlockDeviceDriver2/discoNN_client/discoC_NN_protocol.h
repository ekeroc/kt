/*
 * Copyright (C) 2010-2020 by Cloud Computing Center for Mobile Applications
 * Industrial Technology Research Institute
 *
 * discoC_NN_protocol.h
 *
 * This component aim for paring CN - NN protocol
 *
 */

#ifndef DISCONN_CLIENT_DISCOC_NN_PROTOCOL_H_
#define DISCONN_CLIENT_DISCOC_NN_PROTOCOL_H_

//CN to NN packet header of acquire metadata request
typedef struct discoCN2NN_getMDReq_pkt_header {
    uint64_t magic_number1;
    uint16_t opcode;           //opcode code of metadata request: ref discoC_NNC_Manager_api.h
    uint64_t lb_s;             //start lbid
    uint64_t nnReqID;          //request ID generated by clientnode
    uint64_t volumeID;         //volume id
    uint32_t lb_len;           //number of lbid
    uint64_t magic_number2;
} __attribute__((__packed__)) CN2NN_getMDReq_hder_t;

//NN to CN packet header of all metadata request's response (acquire/report...etc)
typedef struct discoCN2NN_MDResp_pkt_header {
    uint64_t magic_number1;
    int16_t response_type;     //response code from NN: ref discoC_NNC_Manager_api.h
    int16_t resp_data_size;    //size in bytes that indicate how many remaining clientnode need to get from socket
                               //NOTE: resp_data_size include size of request_ID
    uint64_t request_ID;       //request ID in CN2NN request header.
} __attribute__((__packed__)) CN2NN_MDResp_hder_t;

//Describe how many metadata segment in response of CN2NN request.
typedef struct discoCN2NN_getMDResp_MD_header {
    uint64_t metadata_ID;        //metadata ID allocated by namenode: drprecated
    uint16_t num_metadata_items; //how many metadata items in following packet
} __attribute__((__packed__)) CN2NN_getMDResp_mdhder_t;

//Describe the packet format about flow control bandwidth assigned from namenode
typedef struct discoCN2NN_getMDResp_fc_packet {
    int32_t rate_SlowStart;        //slow start rate for preventing clientnode sending too many requests when first time send request
    int32_t rate_SlowStartMaxReqs; //slow start max request for preventing clientnode sending too many requests when first time send request
    int32_t rate_Alloc;            //request sending rate clientnode allowed
    int32_t rate_AllocMaxReqs;     //max request sending clientnode allowed
    int32_t rate_AgeTime;          //rate age time. when current time - last send time > rate_AgeTime, start bandwidth from slow start
} __attribute__((__packed__)) CN2NN_getMDResp_fcpkt_t;

//Describe the DN information within report metadata packet
typedef struct discoCN2NN_ciMDReq_dnLoc_packet {
    int8_t ipv4addr[IPV4ADDR_NM_LEN];    //DN's ipv4 address
    uint32_t port;                       //DN's service port
    int32_t numOfPhyLocs;                //number of physical location for report within 1 DN
    uint64_t *phyLocs_Triplet;           //physical locations array (rbid-length-offset)
} __attribute__ ((__packed__)) CN2NN_ciMDReq_dnLoc_pkt_t;

//Describe the header of report metadata packet
typedef struct discoCN2NN_ciMDReq_pkt_header {
    uint64_t magic_number1;
    uint16_t opcode;           //operation code
    uint64_t volumeID;         //volume ID
    uint64_t request_id;       //request ID generated by clientnode
    uint32_t numOfReportItems; //how many items clientnode report
    uint64_t magic_number2;
} __attribute__ ((__packed__)) CN2NN_ciMDReq_hder_t;

//For display information
typedef struct phys_loc { //NOTE: for show information
    int8_t hostname[IPV4ADDR_NM_LEN]; // must refer to name server for length.
    uint32_t port;
    uint32_t RBID;
    uint32_t off_in_rb;
    uint32_t len;
} __attribute__ ((__packed__)) phys_loc_t;

#ifdef DISCO_PREALLOC_SUPPORT
typedef struct discoCN2NN_fsReportMData_pkt_header {
    uint64_t magic_number1;
    uint16_t opcode;
    uint64_t request_id;
    uint64_t volumeID;
    uint32_t numOfReportItems;
    uint64_t magic_number2;
} __attribute__ ((__packed__)) CN2NN_fsReportMD_hder_t;

typedef struct discoCN2NN_fsReportMData_pkt_Chunk {
    uint64_t chunkID;
    uint32_t length;
    uint64_t lbid_s;
    uint64_t hbid_s;
    uint16_t numReplica;
} __attribute__ ((__packed__)) CN2NN_fsReportMD_chunk_t;

typedef struct discoNN2CN_fsRequest_DNLoc {
    uint16_t ipv4addr_strlen;
    int8_t ipv4addr_str[IPV4ADDR_NM_LEN];
    uint32_t ipv4addr;
    uint32_t port;
    uint32_t rbid;
    uint32_t offset;
} NN2CN_fsReq_DNLoc_t;

typedef struct discoCN2NN_fsReportfreeSpace_pkt_header {
    uint64_t magic_number1;
    uint16_t opcode;
    uint64_t request_id;
    uint64_t volumeID;
    uint64_t chunkID;
    uint64_t hbid_s;
    uint64_t magic_number2;
} __attribute__ ((__packed__)) CN2NN_fsReportFS_hder_t;

typedef struct discoCN2NN_fsAllocMData_pkt_header {
    uint64_t magic_number1;
    uint16_t opcode;
    uint64_t request_id;
    uint64_t volumeID;
    uint32_t min_space_size;
    uint64_t magic_number2;
} __attribute__ ((__packed__)) CN2NN_fsAllocMD_hder_t;

typedef struct discoNN2CN_fsAllocMDResp_chunk {
    uint64_t chunkID;
    uint32_t chunkLen;
    uint64_t hbid_s;
    uint16_t numReplica;
} __attribute__ ((__packed__)) NN2CN_fsAllocMDResp_chunk_t;
#endif

#define DN_IPADDR_NAME_LEN  20  //In CN2NN report metadata packet format, we use 20 bytes to record DN's ipadder
extern uint64_t mnum_net_order; //magic number in network order

extern int32_t NNProto_gen_HBPacket(int8_t *pkt_buffer, int32_t max_buff_size);

extern void NNProto_gen_getMDReqheader(int16_t opcode, uint32_t reqID, uint32_t volID,
        uint64_t lbs, uint32_t lblen, CN2NN_getMDReq_hder_t *nnReq_pkt);
extern int32_t NNProto_MDRespheader_ntoh(CN2NN_MDResp_hder_t *pkt);
extern void NNProto_getMDResp_MDheader_ntoh(CN2NN_getMDResp_mdhder_t *md_hder);
extern uint32_t NNProto_getMDResp_MDItem_ntoh(metaD_item_t *MDItem, uint64_t startLB, uint8_t *mem_buff);
#ifdef DISCO_ERC_SUPPORT
extern uint32_t NNAckERC_MDItem_ntoh_order(metaD_item_t *MDItem, uint64_t startLB, uint8_t *mem_buff);
#endif
extern void NNProto_getMDResp_FlowCtrl_ntoh(CN2NN_getMDResp_fcpkt_t *fcItem, uint8_t *mem_buff);

extern int32_t NNProto_gen_ciMDReq_ReadIO_pkt(uint32_t volumeID, uint32_t nnReqID,
        metadata_t *myMData, int8_t *msg_buf);
extern int32_t NNProto_gen_ciMDReq_WriteIO_pkt(uint32_t volumeID, uint32_t nnReqID,
        metadata_t *myMData, int8_t *msg_buf);
extern void NNProto_show_ciMDReq_WriteIO_pkt(int32_t log_level, int8_t *msg_buf);

#ifdef DISCO_PREALLOC_SUPPORT
//TODO: should use compile flag DISCO_PREALLOC_SUPPORT to disable
extern int32_t fsReq_gen_allocSpace_header(int8_t *pkt_hder,
        uint64_t reqID, uint16_t opcode, uint64_t volID, uint32_t minSize);
extern int32_t fsReq_gen_reportMD_DNLoc(int8_t *pkt, uint32_t ipaddr, uint32_t port,
        uint32_t rbid, uint32_t offset);
extern int32_t fsReq_gen_reportMD_ChunkInfo(int8_t *pkt, uint64_t chunkID,
        uint32_t chunkLen, uint64_t lbid_s, uint64_t hbid_s, uint16_t numReplica);
extern int32_t fsReq_gen_reportMD_header(int8_t *pkt_buff, uint16_t opcode,
        uint64_t reqID, uint64_t volID, uint32_t numItems);
extern int32_t fsReq_gen_reportFS_header(int8_t *pkt_buff, uint16_t opcode,
        uint64_t reqID, uint64_t volID, uint32_t chunkID, uint64_t hbid_s);
extern int32_t fsResp_parse_prealloc_ack_chkHder(int8_t *pkt_buff, uint64_t *reqID, uint32_t *num_chunk);
extern int32_t fsResp_parse_prealloc_ack_chunk(int8_t *pkt_buff, NN2CN_fsAllocMDResp_chunk_t *chunkInfo);
extern int32_t fsResp_parse_reportFS_ack(int8_t *pkt_buff, uint64_t *reqID, uint16_t *result);
extern int32_t fsResp_parse_prealloc_ack_DNLoc(int8_t *pkt_buff, NN2CN_fsReq_DNLoc_t *dnInfo);
#endif
#endif /* DISCONN_CLIENT_DISCOC_NN_PROTOCOL_H_ */
